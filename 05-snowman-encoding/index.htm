<!doctype html>
<html>
    <head>
        <meta charset="utf-8">
        <link rel="stylesheet" href="build/presentation.css">
    </head>
    <body>
        <div class="reveal">
            <div class="slides"><section></section><section></section><section><h2>the snowman encoding</h2>
<h3>UTF-â˜ƒ</h3>
</section><section><blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr"># Ennnnnnnnnnnnnnncoding: UTF^-_-^-_-^8 also works :)</p>&mdash; Armin Ronacher (@mitsuhiko) <a href="https://twitter.com/mitsuhiko/status/1020398504689250304?ref_src=twsrc%5Etfw">July 20, 2018</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><!--
@dabeaz https://twitter.com/dabeaz/status/1020397965456953344
@mitsukiko https://twitter.com/mitsuhiko/status/1020398504689250304
--><!--
# Ennnnnnnnnnnnnnncoding: utf-8
jalapeÃ±o = &#x27;spicy&#x27;
--><!--
# Ennnnnnnnnnnnnnncoding: UTF^-_-^-_-^8 also works :)
jalapeÃ±o = &#x27;spicy&#x27;
--><!--
when demonstrating:
- show it failing in python2, explain that python3 allows unicode variables
- change the encoding to &quot;fake&quot; and show that it fails
- also show that utf-8 is the default encoding
--></section><section><h3>PEP 263</h3>
<ul>
<li>"Defining Python Source Code Encodings"</li>
<li>Search for "encoding cookie" in first two lines</li>
<li>Decode the file contents using that encoding</li>
</ul>
</section><section><h3>what was happening</h3>
<div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">tokenize</span> <span class="kn">import</span> <span class="n">cookie_re</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">cookie_re</span><span class="o">.</span><span class="n">pattern</span><span class="p">)</span>
<span class="go">^[ \t\f]*#.*?coding[:=][ \t]*([-\w.]+)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">cookie_re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;# Ennnncoding: utf-8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="go">&#39;utf-8&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">cookie_re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;# Ennnncoding: UTF^-_-^-_-^8&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="go">&#39;UTF&#39;</span>
</pre></div>
</section><section><h2>ok the actual wat</h2>
<p><em>all examples use python 3.x</em></p>
<p><em>for python 2 add a <code>u</code> prefix to the string</em></p>
</section><section><h3><code>.encode()</code> working</h3>
<p>converts the string to <code>bytes</code></p>
<div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;â˜ƒ&#39;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;UTF-8&#39;</span><span class="p">)</span>
<span class="go">b&#39;\xe2\x98\x83&#39;</span>
</pre></div>
</section><section><h3><code>.encode()</code> failing</h3>
<p>when an invalid codec is passed, a <code>LookupError</code> is produced</p>
<div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;â˜ƒ&#39;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;UTF-garbage&#39;</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">&quot;&lt;stdin&gt;&quot;</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
<span class="gr">LookupError</span>: <span class="n">unknown encoding: UTF-garbage</span>
</pre></div>
<p>... <em>usually</em></p>
</section><section><h3>ðŸ¤”ðŸ¤¨ðŸ¤”ðŸ¤¨ðŸ¤”</h3>
<div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;â˜ƒ&#39;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;UTF-^-_-^-_-^8&#39;</span><span class="p">)</span>
<span class="go">b&#39;\xe2\x98\x83&#39;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;â˜ƒ&#39;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;UTF-â˜ƒ&#39;</span><span class="p">)</span>
<span class="go">b&#39;\xe2\x98\x83&#39;</span>
</pre></div>
</section><section><h3>explanation</h3>
<div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">encodings</span><span class="o">.</span><span class="n">normalize_encoding</span><span class="p">(</span><span class="s1">&#39;UTF-^-_-^-_-^8&#39;</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
<span class="go">&#39;utf_8&#39;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">encodings</span><span class="o">.</span><span class="n">normalize_encoding</span><span class="p">(</span><span class="s1">&#39;UTF-â˜ƒ&#39;</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
<span class="go">&#39;utf&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">encodings</span><span class="o">.</span><span class="n">aliases</span><span class="o">.</span><span class="n">aliases</span><span class="p">[</span><span class="s1">&#39;utf&#39;</span><span class="p">]</span>
<span class="go">&#39;utf_8&#39;</span>
</pre></div>
<!--
encodings go through a multi-phase normalization:
1. `normalizestring`: lower case and `s/ /-/g&#x27;
https://github.com/python/cpython/blob/v3.7.0/Python/codecs.c#L56
2. `encodings.normalize_encoding`
https://github.com/python/cpython/blob/v3.7.0/Lib/encodings/__init__.py#L43
3. alias normalization
https://github.com/python/cpython/blob/v3.7.0/Lib/encodings/__init__.py#L86-L87
--></section></div>
        </div>
        <script src="build/presentation.js"></script>
        <script>
            Reveal.initialize({
                transition: 'linear',
                keyboard: {39: 'next', 37: 'prev'}
            });
        </script>
    </body>
</html>
